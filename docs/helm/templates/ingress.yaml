apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: ingress-nginx
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/client-max-body-size: 50M
    nginx.ingress.kubernetes.io/proxy-body-size: 50M
    nginx.org/websocket-services: platform, hawk
spec:
  rules:
  - host: "{{.Values.hawk.host}}"
    http:
      paths:
        - path: /
          backend:
            serviceName: hawk-ui
            servicePort: 8080
  - host: "prom.{{.Values.hawk.host}}"
    http:
      paths:
      - path: /
        backend:
          serviceName: hawk-prometheus-server
          servicePort: 80
  - host: "*.{{.Values.hawk.host}}"
    http:
      paths:
      - path: /
        backend:
          serviceName: hawk-app
          servicePort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: hawk-app
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    component: hawk-app

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: hawk-app
  name: hawk-app
spec:
  replicas: 1
  selector:
    matchLabels:
        component: hawk-app
  template:
    metadata:
      labels:
        component: hawk-app
    spec:
      containers:
      - name: nginx
        image: "openresty/openresty:centos"
        ports:
        - name: http
          containerPort: 80
          protocol: TCP
        volumeMounts:
        - mountPath: /usr/local/openresty/nginx/conf/nginx.conf
          name: config
          subPath: nginx.conf
      - name: dnsmasq
        image: "janeczku/go-dnsmasq:release-1.0.7"
        args:
          - --listen
          - "127.0.0.1:53"
          - --default-resolver
          - --append-search-domains
          - --hostsfile=/etc/hosts
          - --verbose
      volumes:
      - name: config
        configMap:
          name: hawk-app-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: hawk-app-config
data:
  nginx.conf: |-
      worker_processes  4;

      error_log  /error.log;

      events {
          accept_mutex on;
          multi_accept on;
          use epoll;
          worker_connections  10240;
      }


      http {
          include       mime.types;
          default_type  application/octet-stream;
          log_format  main  '$time_local $remote_user $remote_addr $host $request_uri $request_method $http_cookie '
                            '$status $body_bytes_sent "$http_referer" '
                            '"$http_user_agent" "$http_x_forwarded_for" '
                            '$request_time $upstream_response_time "$upstream_cache_status"';

          log_format  browser '$time_iso8601 $cookie_km_uid $remote_addr $host $request_uri $request_method '
                            '$status $body_bytes_sent "$http_referer" '
                            '"$http_user_agent" "$http_x_forwarded_for" '
                            '$request_time $upstream_response_time "$upstream_cache_status" $http_x_requested_with $http_x_real_ip $upstream_addr $request_body';

          log_format client '{"@timestamp":"$time_iso8601",'
                            '"time_local":"$time_local",'
                            '"remote_user":"$remote_user",'
                            '"http_x_forwarded_for":"$http_x_forwarded_for",'
                            '"host":"$server_addr",'
                            '"remote_addr":"$remote_addr",'
                            '"http_x_real_ip":"$http_x_real_ip",'
                            '"body_bytes_sent":$body_bytes_sent,'
                            '"request_time":$request_time,'
                            '"status":$status,'
                            '"upstream_response_time":"$upstream_response_time",'
                            '"upstream_response_status":"$upstream_status",'
                            '"request":"$request",'
                            '"http_referer":"$http_referer",'
                            '"http_user_agent":"$http_user_agent"}';

          access_log  /access.log  main;

          sendfile        on;

          keepalive_timeout 120s 100s;
          keepalive_requests 500;
          send_timeout 60000s;
          #client_header_buffer_size 4k;
          client_header_buffer_size 512k;
          #large_client_header_buffers
          large_client_header_buffers 4 512k;
          proxy_ignore_client_abort on;
          proxy_buffers 16 32k;
          proxy_buffer_size 64k;

          proxy_busy_buffers_size 64k;

          proxy_send_timeout 60000;
          proxy_read_timeout 60000;
          proxy_connect_timeout 60000;
          proxy_cache_valid 200 304 2h;
          proxy_cache_valid 500 404 2s;
          proxy_cache_key $host$request_uri$cookie_user;
          proxy_cache_methods GET HEAD POST;

          proxy_redirect off;
          proxy_http_version 1.1;
          proxy_set_header Host                $http_host;
          proxy_set_header X-Real-IP           $remote_addr;
          proxy_set_header X-Forwarded-For     $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto   $scheme;
          proxy_set_header X-Frame-Options     SAMEORIGIN;

          server_tokens off;
          client_max_body_size 50G;
          add_header X-Cache $upstream_cache_status;
          autoindex off;
          underscores_in_headers on;
          resolver      127.0.0.1:53;
          server {
              listen 80;

              location / {
                  set $service  '';
                  rewrite_by_lua '
                      local host = ngx.var.host
                      local m = ngx.re.match(host, "(.+).{{.Values.hawk.host}}")

                      if m then
                          ngx.var.service = m[1]
                      end
                  ';
                  proxy_pass http://$service.{{.Values.hawk.appns}}:8080;
              }
          }
      }
